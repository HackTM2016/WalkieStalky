//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v2.32.5984.33894 (http://NSwag.org)
// </auto-generated>
//----------------------

using System;
using System.Collections.ObjectModel;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using System.Text;
using Newtonsoft.Json;

namespace WalkieStalky.Services
{
    public partial class walkiestalkyclient
    {
        public walkiestalkyclient() : this("https://walkiestalky.verspult.com/api") { }

        public walkiestalkyclient(string baseUrl)
        {
            BaseUrl = baseUrl;
        }

        partial void PrepareRequest(HttpClient request, ref string url);

        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);

        public string BaseUrl { get; set; }

        /// <summary>Put a person record into the system, along with the topics he is interested. All user posts will be automatically removed again from the system after a timespan of 5 minutes. The service responds with all users that are close to the system.</summary>
        /// <returns>Putting the user with his topics was successful</returns>
        /// <exception cref="walkiestalkyclient.SwaggerException">A server side error occurred.</exception>
        public Task<ClosePersonList> PutpersonAsync(string personid, string authtoken, PersonRecord personrecord)
        {
            return PutpersonAsync(personid, authtoken, personrecord, CancellationToken.None);
        }

        /// <summary>Put a person record into the system, along with the topics he is interested. All user posts will be automatically removed again from the system after a timespan of 5 minutes. The service responds with all users that are close to the system.</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Putting the user with his topics was successful</returns>
        /// <exception cref="walkiestalkyclient.SwaggerException">A server side error occurred.</exception>
        public async Task<ClosePersonList> PutpersonAsync(string personid, string authtoken, PersonRecord personrecord, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "persons/{personid}");

            if (personid == null)
                throw new ArgumentNullException("personid");

            url_ = url_.Replace("{personid}", Uri.EscapeUriString(personid.ToString()));

            if (authtoken == null)
                throw new ArgumentNullException("authtoken");
            else
                url_ += string.Format("authtoken={0}&", Uri.EscapeUriString(authtoken.ToString()));
            var client_ = new HttpClient();
            PrepareRequest(client_, ref url_);


            var content_ = new StringContent(JsonConvert.SerializeObject(personrecord));
            content_.Headers.ContentType.MediaType = "application/json";

            var response_ = await client_.PutAsync(url_, content_, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(ClosePersonList);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<ClosePersonList>(Encoding.UTF8.GetString(responseData_,0,responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", response_.StatusCode, responseData_, exception);
                }
            }
            else if (status_ == "405")
            {
                return await default(Task<ClosePersonList>);

            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", response_.StatusCode, responseData_, null);
        }


        public class SwaggerException : Exception
        {
            public HttpStatusCode StatusCode { get; private set; }

            public byte[] ResponseData { get; private set; }

            public SwaggerException(string message, HttpStatusCode statusCode, byte[] responseData, Exception innerException)
                : base(message, innerException)
            {
                StatusCode = statusCode;
                ResponseData = responseData;
            }

            public override string ToString()
            {
                return string.Format("HTTP Response: n{0}n{1}", Encoding.UTF8.GetString(ResponseData,0,ResponseData.Length), base.ToString());
            }
        }

        public class SwaggerException<TResponse> : SwaggerException
        {
            public TResponse Response { get; private set; }

            public SwaggerException(string message, HttpStatusCode statusCode, byte[] responseData, TResponse response, Exception innerException)
                : base(message, statusCode, responseData, innerException)
            {
                Response = response;
            }
        }
    }



    public partial class PersonRecord
    {

        /// <summary>A public technical id we can use to connect to the user</summary>
        [JsonProperty("publicId", Required = Required.Default)]
        public string PublicId { get; set; }

        /// <summary>The name to display on other people's phones</summary>
        [JsonProperty("name", Required = Required.Default)]
        public string Name { get; set; }

        /// <summary>The phone number of the user</summary>
        [JsonProperty("phonenumber", Required = Required.Default)]
        public string Phonenumber { get; set; }

        [JsonProperty("topics", Required = Required.Default)]
        public ObservableCollection<string> Topics { get; set; }

        [JsonProperty("coordinates", Required = Required.Default)]
        public GeoCoordinates Coordinates { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static PersonRecord FromJson(string data)
        {
            return JsonConvert.DeserializeObject<PersonRecord>(data);
        }
    }

    /// <summary>This datatype encodes a GPS location using decimal degrees. See <a href="https://en.wikipedia.org/wiki/Decimal_degrees" target="_new">https://en.wikipedia.org/wiki/Decimal_degrees</a> for a description of this geo format<</summary>
    public partial class GeoCoordinates
    {

        [JsonProperty("longitude", Required = Required.Default)]
        public double Longitude { get; set; }

        [JsonProperty("latitude", Required = Required.Default)]
        public double Latitude { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static GeoCoordinates FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GeoCoordinates>(data);
        }
    }

    /// <summary>This datatype models a list of persons that are close to the user's geo coordinate specified in the person record of the request. In essence, this is a response type that models a list of persons, with additional information if the person was matched.</summary>
    public partial class ClosePersonList
    {

        [JsonProperty("ClosePersons", Required = Required.Default)]
        public ObservableCollection<PersonRecord> ClosePersons { get; set; }

        [JsonProperty("Match", Required = Required.Default)]
        public BestMatch Match { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ClosePersonList FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ClosePersonList>(data);
        }
    }

    /// <summary>This user  best match of the requesting user.</summary>
    public partial class BestMatch
    {

        [JsonProperty("matchedTopic", Required = Required.Default)]
        public string MatchedTopic { get; set; }

        [JsonProperty("bestMatchedPerson", Required = Required.Default)]
        public PersonRecord BestMatchedPerson { get; set; }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static BestMatch FromJson(string data)
        {
            return JsonConvert.DeserializeObject<BestMatch>(data);
        }
    }
}